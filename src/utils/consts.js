export const movements = {
    n: [
        {c: -2, r: -1, isAttack: true},
        {c: -1, r: -2, isAttack: true},
        {c: 2, r: -1, isAttack: true},
        {c: 1, r: -2, isAttack: true},
        {c: -2, r: 1, isAttack: true},
        {c: -1, r: 2, isAttack: true},
        {c: 2, r: 1, isAttack: true},
        {c: 1, r: 2, isAttack: true},
    ],
    k: [
        {c: -1, r: -1, isAttack: true},
        {c: 0, r: -1, isAttack: true},
        {c: 1, r: -1, isAttack: true},
        {c: -1, r: 0, isAttack: true},
        {c: 1, r: 0, isAttack: true},
        {c: -1, r: 1, isAttack: true},
        {c: 0, r: 1, isAttack: true},
        {c: 1, r: 1, isAttack: true},
        {c: 2, r: 0, isAttack: true, sideNeeded: 'w', condition: (props) => props.castles.includes('K'), castle: 'K'},
        {c: -2, r: 0, isAttack: true, sideNeeded: 'w', condition: (props) => props.castles.includes('Q'), castle: 'Q'},
        {c: 2, r: 0, isAttack: true, sideNeeded: 'b', condition: (props) => props.castles.includes('k'), castle: 'k'},
        {c: -2, r: 0, isAttack: true, sideNeeded: 'b', condition: (props) => props.castles.includes('q'), castle: 'q'},

    ],
    r: [
        {c: 0, r: -1, isLoop: true, isAttack: true},
        {c: 0, r: 1, isLoop: true, isAttack: true},
        {c: 1, r: 0, isLoop: true, isAttack: true},
        {c: -1, r: 0, isLoop: true, isAttack: true},
    ],
    b: [
        {c: -1, r: -1, isLoop: true, isAttack: true},
        {c: 1, r: -1, isLoop: true, isAttack: true},
        {c: -1, r: 1, isLoop: true, isAttack: true},
        {c: 1, r: 1, isLoop: true, isAttack: true},
    ],
    q: [
        {c: -1, r: -1, isLoop: true, isAttack: true},
        {c: 1, r: -1, isLoop: true, isAttack: true},
        {c: -1, r: 1, isLoop: true, isAttack: true},
        {c: 1, r: 1, isLoop: true, isAttack: true},
        {c: 0, r: -1, isLoop: true, isAttack: true},
        {c: -1, r: 0, isLoop: true, isAttack: true},
        {c: 1, r: 0, isLoop: true, isAttack: true},
        {c: 0, r: 1, isLoop: true, isAttack: true},
    ],
    p: [
        {c: 0, r: 1, isAttack: false, sideNeeded: 'b'},
        {c: 0, r: 2, isAttack: false, sideNeeded: 'b', condition: (props) => props.r === 1 && !props.pieces.find(p => p.i === (props.r+1)*8+props.c)},
        {c: 0, r: -1, isAttack: false, sideNeeded: 'w'},
        {c: 0, r: -2, isAttack: false, sideNeeded: 'w', condition: (props) => props.r === 6 && !props.pieces.find(p => p.i === (props.r-1)*8+props.c)},
        {c: -1, r: 1, isAttack: true, sideNeeded: 'b'},//, condition: (props) => (notationToIndex(props.enpassant).i === (props.r+1)*8+props.c-1 && isBetween(40, notationToIndex(props.enpassant).i, 47)), isEnpassant: (props) => notationToIndex(props.enpassant).i === (props.r+1)*8+props.c-1},
        {c: 1, r: 1, isAttack: true, sideNeeded: 'b'},// condition: (props) => (notationToIndex(props.enpassant).i === (props.r+1)*8+props.c+1 && isBetween(40, notationToIndex(props.enpassant).i, 47)), isEnpassant: (props) => notationToIndex(props.enpassant).i === (props.r+1)*8+props.c+1},
        {c: -1, r: -1, isAttack: true, sideNeeded: 'w'},// condition: (props) => (notationToIndex(props.enpassant).i === (props.r-1)*8+props.c-1 && isBetween(16, notationToIndex(props.enpassant).i, 23)), isEnpassant: (props) => notationToIndex(props.enpassant).i === (props.r-1)*8+props.c-1},
        {c: 1, r: -1, isAttack: true, sideNeeded: 'w'},// condition: (props) => (notationToIndex(props.enpassant).i === (props.r-1)*8+props.c+1 && isBetween(16, notationToIndex(props.enpassant).i, 23)), isEnpassant: (props) => notationToIndex(props.enpassant).i === (props.r-1)*8+props.c+1},
    ]
}